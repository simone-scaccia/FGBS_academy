load_and_structure_pdfs_task:
  description: >
    Load all PDF files from the dataset/{certification} folder and extract their content, ensuring that no information is lost, even if it seems less relevant. Structure the extracted data so it is ready for direct insertion into a Qdrant database, following the conventions required by the load_pdf tool. All details must be preserved to enable the generation of highly specific quiz questions for the certification.
  expected_output: >
    A list of langchain.schema.Document objects, each containing the extracted content from a PDF file. Each Document must include metadata with at least the 'source' field set to the PDF filename, as required by the load_pdf tool in db_tools.py. No information should be omitted, regardless of its perceived relevance.
  agent: PDF_formatter

create_qdrant_db_task:
  description: >
    Create and configure a new Qdrant vector database instance, ready to receive documents for the specified certification or topic.
  expected_output: >
    A Qdrant database instance, configured and ready for document ingestion.
  agent: DB_engineer

load_documents_to_qdrant_task:
  description: >
    Receive a list of langchain.schema.Document objects (from the load_pdf tool) and load them into the existing Qdrant database created by create_qdrant_db_task. Ensure all documents are properly chunked and indexed for efficient retrieval and quiz generation.
  expected_output: >
    All provided Document objects are successfully chunked (if necessary) and loaded into the Qdrant database, with confirmation of successful ingestion.
  agent: DB_engineer